// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: distributo.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MessageDistributor_DistributeMessage_FullMethodName = "/proto.MessageDistributor/DistributeMessage"
)

// MessageDistributorClient is the client API for MessageDistributor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageDistributorClient interface {
	DistributeMessage(ctx context.Context, in *DistributeMessageRequest, opts ...grpc.CallOption) (*DistributeMessageResponse, error)
}

type messageDistributorClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageDistributorClient(cc grpc.ClientConnInterface) MessageDistributorClient {
	return &messageDistributorClient{cc}
}

func (c *messageDistributorClient) DistributeMessage(ctx context.Context, in *DistributeMessageRequest, opts ...grpc.CallOption) (*DistributeMessageResponse, error) {
	out := new(DistributeMessageResponse)
	err := c.cc.Invoke(ctx, MessageDistributor_DistributeMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageDistributorServer is the server API for MessageDistributor service.
// All implementations must embed UnimplementedMessageDistributorServer
// for forward compatibility
type MessageDistributorServer interface {
	DistributeMessage(context.Context, *DistributeMessageRequest) (*DistributeMessageResponse, error)
	mustEmbedUnimplementedMessageDistributorServer()
}

// UnimplementedMessageDistributorServer must be embedded to have forward compatible implementations.
type UnimplementedMessageDistributorServer struct {
}

func (UnimplementedMessageDistributorServer) DistributeMessage(context.Context, *DistributeMessageRequest) (*DistributeMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DistributeMessage not implemented")
}
func (UnimplementedMessageDistributorServer) mustEmbedUnimplementedMessageDistributorServer() {}

// UnsafeMessageDistributorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageDistributorServer will
// result in compilation errors.
type UnsafeMessageDistributorServer interface {
	mustEmbedUnimplementedMessageDistributorServer()
}

func RegisterMessageDistributorServer(s grpc.ServiceRegistrar, srv MessageDistributorServer) {
	s.RegisterService(&MessageDistributor_ServiceDesc, srv)
}

func _MessageDistributor_DistributeMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistributeMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDistributorServer).DistributeMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageDistributor_DistributeMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDistributorServer).DistributeMessage(ctx, req.(*DistributeMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageDistributor_ServiceDesc is the grpc.ServiceDesc for MessageDistributor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageDistributor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MessageDistributor",
	HandlerType: (*MessageDistributorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DistributeMessage",
			Handler:    _MessageDistributor_DistributeMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "distributo.proto",
}
