// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: groupMessageService.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GroupMessageService_SendGroupMessage_FullMethodName = "/proto.GroupMessageService/SendGroupMessage"
	GroupMessageService_GetGroupMessage_FullMethodName  = "/proto.GroupMessageService/GetGroupMessage"
)

// GroupMessageServiceClient is the client API for GroupMessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupMessageServiceClient interface {
	SendGroupMessage(ctx context.Context, in *SendGroupMessageRequest, opts ...grpc.CallOption) (*SendGroupMessageResponse, error)
	GetGroupMessage(ctx context.Context, in *GetGroupMessageRequest, opts ...grpc.CallOption) (*GetGroupMessageResponse, error)
}

type groupMessageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupMessageServiceClient(cc grpc.ClientConnInterface) GroupMessageServiceClient {
	return &groupMessageServiceClient{cc}
}

func (c *groupMessageServiceClient) SendGroupMessage(ctx context.Context, in *SendGroupMessageRequest, opts ...grpc.CallOption) (*SendGroupMessageResponse, error) {
	out := new(SendGroupMessageResponse)
	err := c.cc.Invoke(ctx, GroupMessageService_SendGroupMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupMessageServiceClient) GetGroupMessage(ctx context.Context, in *GetGroupMessageRequest, opts ...grpc.CallOption) (*GetGroupMessageResponse, error) {
	out := new(GetGroupMessageResponse)
	err := c.cc.Invoke(ctx, GroupMessageService_GetGroupMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupMessageServiceServer is the server API for GroupMessageService service.
// All implementations must embed UnimplementedGroupMessageServiceServer
// for forward compatibility
type GroupMessageServiceServer interface {
	SendGroupMessage(context.Context, *SendGroupMessageRequest) (*SendGroupMessageResponse, error)
	GetGroupMessage(context.Context, *GetGroupMessageRequest) (*GetGroupMessageResponse, error)
	mustEmbedUnimplementedGroupMessageServiceServer()
}

// UnimplementedGroupMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGroupMessageServiceServer struct {
}

func (UnimplementedGroupMessageServiceServer) SendGroupMessage(context.Context, *SendGroupMessageRequest) (*SendGroupMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGroupMessage not implemented")
}
func (UnimplementedGroupMessageServiceServer) GetGroupMessage(context.Context, *GetGroupMessageRequest) (*GetGroupMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupMessage not implemented")
}
func (UnimplementedGroupMessageServiceServer) mustEmbedUnimplementedGroupMessageServiceServer() {}

// UnsafeGroupMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupMessageServiceServer will
// result in compilation errors.
type UnsafeGroupMessageServiceServer interface {
	mustEmbedUnimplementedGroupMessageServiceServer()
}

func RegisterGroupMessageServiceServer(s grpc.ServiceRegistrar, srv GroupMessageServiceServer) {
	s.RegisterService(&GroupMessageService_ServiceDesc, srv)
}

func _GroupMessageService_SendGroupMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendGroupMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupMessageServiceServer).SendGroupMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupMessageService_SendGroupMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupMessageServiceServer).SendGroupMessage(ctx, req.(*SendGroupMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupMessageService_GetGroupMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupMessageServiceServer).GetGroupMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupMessageService_GetGroupMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupMessageServiceServer).GetGroupMessage(ctx, req.(*GetGroupMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupMessageService_ServiceDesc is the grpc.ServiceDesc for GroupMessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupMessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GroupMessageService",
	HandlerType: (*GroupMessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendGroupMessage",
			Handler:    _GroupMessageService_SendGroupMessage_Handler,
		},
		{
			MethodName: "GetGroupMessage",
			Handler:    _GroupMessageService_GetGroupMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "groupMessageService.proto",
}
